'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configureLaunchAssetsAsync = undefined;

let _setBackgroundImageAsync = (() => {
  var _ref = _asyncToGenerator(function* (manifest, projectRoot) {
    let tabletImage;
    let phoneImage;

    if (manifest.ios && manifest.ios.splash && manifest.ios.splash.imageUrl) {
      phoneImage = manifest.ios.splash.imageUrl;

      if (manifest.ios.splash.tabletImageUrl) {
        tabletImage = manifest.ios.splash.tabletImageUrl;
      }
    } else if (manifest.splash && manifest.splash.imageUrl) {
      phoneImage = manifest.splash.imageUrl;
    }

    if (!phoneImage) {
      return;
    }

    const outputs = [];
    if (!tabletImage) {
      outputs.push({
        url: phoneImage,
        path: _path.default.join(projectRoot, 'launch_background_image.png')
      });
    } else {
      outputs.push({
        url: phoneImage,
        path: _path.default.join(projectRoot, 'launch_background_image~iphone.png')
      });
      outputs.push({
        url: tabletImage,
        path: _path.default.join(projectRoot, 'launch_background_image.png')
      });
    }

    outputs.forEach((() => {
      var _ref2 = _asyncToGenerator(function* (output) {
        let { url, path } = output;
        yield (0, (_ExponentTools || _load_ExponentTools()).saveImageToPathAsync)(projectRoot, url, path);
      });

      return function (_x3) {
        return _ref2.apply(this, arguments);
      };
    })());
  });

  return function _setBackgroundImageAsync(_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();

let configureLaunchAssetsAsync = (() => {
  var _ref3 = _asyncToGenerator(function* (manifest, projectRoot, srcRoot) {
    if (!(0, (_ExponentTools || _load_ExponentTools()).manifestUsesSplashApi)(manifest, 'ios')) {
      // Don't do loading xib customizations if `splash` keys don't exist
      return;
    }

    console.log('Configuring iOS Launch Screen');
    let splashXibFilename = _path.default.join(srcRoot, 'Exponent', 'Base.lproj', 'LaunchScreenShell.xib');
    let splashOutputFilename = _path.default.join(projectRoot, 'Base.lproj', 'LaunchScreenShell.nib');

    yield (0, (_ExponentTools || _load_ExponentTools()).transformFileContentsAsync)(splashXibFilename, function (fileString) {
      const parser = new (_xmldom || _load_xmldom()).DOMParser();
      const serializer = new (_xmldom || _load_xmldom()).XMLSerializer();
      const dom = parser.parseFromString(fileString);

      _setBackgroundColor(manifest, dom);
      _setBackgroundImageResizeMode(manifest, dom);

      return serializer.serializeToString(dom);
    });

    yield _setBackgroundImageAsync(manifest, projectRoot);

    yield (0, (_ExponentTools || _load_ExponentTools()).spawnAsyncThrowError)('ibtool', ['--compile', splashOutputFilename, splashXibFilename]);

    console.log('DONE Configuring iOS Launch Screen');
  });

  return function configureLaunchAssetsAsync(_x4, _x5, _x6) {
    return _ref3.apply(this, arguments);
  };
})();

var _path = _interopRequireDefault(require('path'));

var _ExponentTools;

function _load_ExponentTools() {
  return _ExponentTools = require('./ExponentTools');
}

var _xmldom;

function _load_xmldom() {
  return _xmldom = require('xmldom');
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const ASPECT_FILL = 'scaleAspectFill';
const ASPECT_FIT = 'scaleAspectFit';

const backgroundImageViewID = 'Bsh-cT-K4l';
const backgroundViewID = 'OfY-5Y-tS4';

function _backgroundColorFromHexString(hexColor) {
  const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hexColor);
  if (!result || result.length < 4) {
    // Default to white if we can't parse the color. We should have 3 matches.
    console.warn('Unable to parse color: ', hexColor, ' result:', result);
    return { r: 1, g: 1, b: 1 };
  }

  const r = parseInt(result[1], 16) / 255;
  const g = parseInt(result[2], 16) / 255;
  const b = parseInt(result[3], 16) / 255;
  return { r, g, b };
}

function _setBackgroundColor(manifest, dom) {
  let backgroundColorString;
  if (manifest.ios && manifest.ios.splash && manifest.ios.splash.backgroundColor) {
    backgroundColorString = manifest.ios.splash.backgroundColor;
  } else if (manifest.splash && manifest.splash.backgroundColor) {
    backgroundColorString = manifest.splash.backgroundColor;
  }

  // Default to white
  if (!backgroundColorString) {
    backgroundColorString = '#FFFFFF';
  }

  const { r, g, b } = _backgroundColorFromHexString(backgroundColorString);
  const backgroundViewNode = dom.getElementById(backgroundViewID);
  const backgroundViewColorNodes = backgroundViewNode.getElementsByTagName('color');
  let backgroundColorNode;
  for (let i = 0; i < backgroundViewColorNodes.length; i++) {
    const node = backgroundViewColorNodes[i];
    if (node.parentNode.getAttribute('id') !== backgroundViewID) {
      continue;
    }

    if (node.getAttribute('key') === 'backgroundColor') {
      backgroundColorNode = node;
      break;
    }
  }

  if (backgroundColorNode) {
    backgroundColorNode.setAttribute('red', r);
    backgroundColorNode.setAttribute('green', g);
    backgroundColorNode.setAttribute('blue', b);
  }
}

function _setBackgroundImageResizeMode(manifest, dom) {
  let backgroundViewMode = (() => {
    let mode;
    if (!manifest) {
      return ASPECT_FIT;
    }

    if (manifest.ios && manifest.ios.splash && manifest.ios.splash.resizeMode) {
      mode = manifest.ios.splash.resizeMode;
    } else if (manifest.splash && manifest.splash.resizeMode) {
      mode = manifest.splash.resizeMode;
    }

    return mode === 'cover' ? ASPECT_FILL : ASPECT_FIT;
  })();

  const backgroundImageViewNode = dom.getElementById(backgroundImageViewID);
  if (backgroundImageViewNode) {
    backgroundImageViewNode.setAttribute('contentMode', backgroundViewMode);
  }
}

exports.configureLaunchAssetsAsync = configureLaunchAssetsAsync;
//# sourceMappingURL=../__sourcemaps__/detach/IosLaunchScreen.js.map
