{"version":3,"sources":["detach/IosAssetArchive.js"],"names":["async","manifest","destinationCARPath","expoSourceRoot","intermediatesDirectory","mkdirp","sync","await","spawnAsyncThrowError","path","join","stdio","IosIcons","createAndWriteIconsToPathAsync","let","xcrunargs","concat","relative","cwd","buildAssetArchiveAsync"],"mappings":";;;;;;;AAUA;;;;+BAGAA,WACEC,QADFD,EAEEE,kBAFFF,EAGEG,cAHFH,EAIEI,sBAJFJ,EAKE;AACAK,wCAAOC,IAAPD,CAAYD,sBAAZC;;AAEA;AACAE,UAAMC,oEACJ,SADIA,EAEJ,CACE,IADF,EAEEC,cAAKC,IAALD,CAAUN,cAAVM,EAA0B,UAA1BA,EAAsC,iBAAtCA,CAFF,EAGEA,cAAKC,IAALD,CAAUL,sBAAVK,EAAkC,iBAAlCA,CAHF,CAFID,EAOJ;AACEG,aAAO;AADT,KAPIH,CAAND;;AAYA;AACAA,UAAMK,gCAASC,8BAATD,CACJX,QADIW,EAEJH,cAAKC,IAALD,CAAUL,sBAAVK,EAAkC,iBAAlCA,EAAqD,oBAArDA,CAFIG,CAANL;;AAKA;AACAO,QAAIC,YAAY,GAAGC,MAAH,CACd,CAAC,QAAD,CADc,EAEd,CAAC,6BAAD,EAAgC,KAAhC,CAFc,EAGd,CAAC,YAAD,EAAe,UAAf,CAHc,EAId,CAAC,YAAD,EAAe,SAAf,CAJc,EAKd,CACE,6BADF,EAEEP,cAAKC,IAALD,CAAUL,sBAAVK,EAAkC,mCAAlCA,CAFF,CALc,EASd,CAAC,iBAAD,CATc,EAUd,CAAC,8BAAD,EAAiC,KAAjC,CAVc,EAWd,CAAC,gBAAD,EAAmB,oCAAnB,CAXc,EAYd,CAAC,iBAAD,EAAoB,QAApB,CAZc,EAad,CAAC,iBAAD,EAAoB,MAApB,CAbc,EAcd,CAAC,WAAD,EAAcA,cAAKQ,QAALR,CAAcL,sBAAdK,EAAsCP,kBAAtCO,CAAd,CAdc,EAed,CAAC,iBAAD,CAfc,CAAhBK;AAiBAP,UAAMC,oEAAqB,OAArBA,EAA8BO,SAA9BP,EAAyC;AAC7CG,aAAO,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,CADsC,EACP;AACtCO,WAAKd;AAFwC,KAAzCI,CAAND;;AAKA;AACF,G;;kBAnDeY,sB;;;;;;;AAZf;AAAA;AAAA;;AACA;;;;AAEA;AAAA;AAAA;;;;AAIA;AAAA;AAAA;;;;;;;;QA2DEA,sB,GAAAA,sB","file":"../../detach/IosAssetArchive.js","sourcesContent":["\nimport mkdirp from 'mkdirp';\nimport path from 'path';\n\nimport {\n  spawnAsyncThrowError,\n} from './ExponentTools';\n\nimport * as IosIcons from './IosIcons';\n\n/**\n *  Compile a .car file from the icons in a manifest.\n */\nasync function buildAssetArchiveAsync(\n  manifest,\n  destinationCARPath,\n  expoSourceRoot,\n  intermediatesDirectory\n) {\n  mkdirp.sync(intermediatesDirectory);\n\n  // copy expoSourceRoot/.../Images.xcassets into intermediates\n  await spawnAsyncThrowError(\n    '/bin/cp',\n    [\n      '-R',\n      path.join(expoSourceRoot, 'Exponent', 'Images.xcassets'),\n      path.join(intermediatesDirectory, 'Images.xcassets'),\n    ],\n    {\n      stdio: 'inherit',\n    }\n  );\n\n  // make the new xcassets contain the project's icon\n  await IosIcons.createAndWriteIconsToPathAsync(\n    manifest,\n    path.join(intermediatesDirectory, 'Images.xcassets', 'AppIcon.appiconset')\n  );\n\n  // compile asset archive\n  let xcrunargs = [].concat(\n    ['actool'],\n    ['--minimum-deployment-target', '9.0'],\n    ['--platform', 'iphoneos'],\n    ['--app-icon', 'AppIcon'],\n    [\n      '--output-partial-info-plist',\n      path.join(intermediatesDirectory, 'assetcatalog_generated_info.plist'),\n    ],\n    ['--compress-pngs'],\n    ['--enable-on-demand-resources', 'YES'],\n    ['--product-type', 'com.apple.product-type.application'],\n    ['--target-device', 'iphone'],\n    ['--target-device', 'ipad'],\n    ['--compile', path.relative(intermediatesDirectory, destinationCARPath)],\n    ['Images.xcassets']\n  );\n  await spawnAsyncThrowError('xcrun', xcrunargs, {\n    stdio: ['ignore', 'ignore', 'inherit'], // only stderr\n    cwd: intermediatesDirectory,\n  });\n\n  return;\n}\n\nexport {\n  buildAssetArchiveAsync,\n};\n"],"sourceRoot":"/xdl/src"}