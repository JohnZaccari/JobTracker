{"version":3,"sources":["detach/IosLaunchScreen.js"],"names":["async","manifest","projectRoot","let","tabletImage","phoneImage","ios","splash","imageUrl","tabletImageUrl","outputs","push","url","path","join","forEach","output","await","saveImageToPathAsync","_setBackgroundImageAsync","srcRoot","manifestUsesSplashApi","console","log","splashXibFilename","splashOutputFilename","transformFileContentsAsync","fileString","parser","serializer","dom","parseFromString","_setBackgroundColor","_setBackgroundImageResizeMode","serializeToString","spawnAsyncThrowError","configureLaunchAssetsAsync","ASPECT_FILL","ASPECT_FIT","backgroundImageViewID","backgroundViewID","_backgroundColorFromHexString","hexColor","result","exec","length","warn","r","g","b","parseInt","backgroundColorString","backgroundColor","backgroundViewNode","getElementById","backgroundViewColorNodes","getElementsByTagName","backgroundColorNode","i","node","parentNode","getAttribute","setAttribute","backgroundViewMode","mode","resizeMode","backgroundImageViewNode"],"mappings":"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","file":"../../detach/IosLaunchScreen.js","sourcesContent":["\nimport path from 'path';\n\nimport {\n  manifestUsesSplashApi,\n  saveImageToPathAsync,\n  spawnAsyncThrowError,\n  transformFileContentsAsync,\n} from './ExponentTools';\n\nimport { DOMParser, XMLSerializer } from 'xmldom';\n\nconst ASPECT_FILL = 'scaleAspectFill';\nconst ASPECT_FIT = 'scaleAspectFit';\n\nconst backgroundImageViewID = 'Bsh-cT-K4l';\nconst backgroundViewID = 'OfY-5Y-tS4';\n\nfunction _backgroundColorFromHexString(hexColor) {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hexColor);\n  if (!result || result.length < 4) {\n    // Default to white if we can't parse the color. We should have 3 matches.\n    console.warn('Unable to parse color: ', hexColor, ' result:', result);\n    return { r: 1, g: 1, b: 1 };\n  }\n\n  const r = parseInt(result[1], 16) / 255;\n  const g = parseInt(result[2], 16) / 255;\n  const b = parseInt(result[3], 16) / 255;\n  return { r, g, b };\n}\n\nfunction _setBackgroundColor(manifest, dom) {\n  let backgroundColorString;\n  if (\n    manifest.ios &&\n    manifest.ios.splash &&\n    manifest.ios.splash.backgroundColor\n  ) {\n    backgroundColorString = manifest.ios.splash.backgroundColor;\n  } else if (manifest.splash && manifest.splash.backgroundColor) {\n    backgroundColorString = manifest.splash.backgroundColor;\n  }\n\n  // Default to white\n  if (!backgroundColorString) {\n    backgroundColorString = '#FFFFFF';\n  }\n\n  const { r, g, b } = _backgroundColorFromHexString(backgroundColorString);\n  const backgroundViewNode = dom.getElementById(backgroundViewID);\n  const backgroundViewColorNodes = backgroundViewNode.getElementsByTagName(\n    'color'\n  );\n  let backgroundColorNode;\n  for (let i = 0; i < backgroundViewColorNodes.length; i++) {\n    const node = backgroundViewColorNodes[i];\n    if (node.parentNode.getAttribute('id') !== backgroundViewID) {\n      continue;\n    }\n\n    if (node.getAttribute('key') === 'backgroundColor') {\n      backgroundColorNode = node;\n      break;\n    }\n  }\n\n  if (backgroundColorNode) {\n    backgroundColorNode.setAttribute('red', r);\n    backgroundColorNode.setAttribute('green', g);\n    backgroundColorNode.setAttribute('blue', b);\n  }\n}\n\nasync function _setBackgroundImageAsync(manifest, projectRoot) {\n  let tabletImage;\n  let phoneImage;\n\n  if (manifest.ios && manifest.ios.splash && manifest.ios.splash.imageUrl) {\n    phoneImage = manifest.ios.splash.imageUrl;\n\n    if (manifest.ios.splash.tabletImageUrl) {\n      tabletImage = manifest.ios.splash.tabletImageUrl;\n    }\n  } else if (manifest.splash && manifest.splash.imageUrl) {\n    phoneImage = manifest.splash.imageUrl;\n  }\n\n  if (!phoneImage) {\n    return;\n  }\n\n  const outputs = [];\n  if (!tabletImage) {\n    outputs.push({\n      url: phoneImage,\n      path: path.join(projectRoot, 'launch_background_image.png'),\n    });\n  } else {\n    outputs.push({\n      url: phoneImage,\n      path: path.join(projectRoot, 'launch_background_image~iphone.png'),\n    });\n    outputs.push({\n      url: tabletImage,\n      path: path.join(projectRoot, 'launch_background_image.png'),\n    });\n  }\n\n  outputs.forEach(async output => {\n    let { url, path } = output;\n    await saveImageToPathAsync(projectRoot, url, path);\n  });\n}\n\nfunction _setBackgroundImageResizeMode(manifest, dom) {\n  let backgroundViewMode = (() => {\n    let mode;\n    if (!manifest) {\n      return ASPECT_FIT;\n    }\n\n    if (manifest.ios && manifest.ios.splash && manifest.ios.splash.resizeMode) {\n      mode = manifest.ios.splash.resizeMode;\n    } else if (manifest.splash && manifest.splash.resizeMode) {\n      mode = manifest.splash.resizeMode;\n    }\n\n    return mode === 'cover' ? ASPECT_FILL : ASPECT_FIT;\n  })();\n\n  const backgroundImageViewNode = dom.getElementById(backgroundImageViewID);\n  if (backgroundImageViewNode) {\n    backgroundImageViewNode.setAttribute('contentMode', backgroundViewMode);\n  }\n}\n\nasync function configureLaunchAssetsAsync(manifest, projectRoot, srcRoot) {\n  if (!manifestUsesSplashApi(manifest, 'ios')) {\n    // Don't do loading xib customizations if `splash` keys don't exist\n    return;\n  }\n\n  console.log('Configuring iOS Launch Screen');\n  let splashXibFilename = path.join(\n    srcRoot,\n    'Exponent',\n    'Base.lproj',\n    'LaunchScreenShell.xib'\n  );\n  let splashOutputFilename = path.join(\n    projectRoot,\n    'Base.lproj',\n    'LaunchScreenShell.nib'\n  );\n\n  await transformFileContentsAsync(splashXibFilename, fileString => {\n    const parser = new DOMParser();\n    const serializer = new XMLSerializer();\n    const dom = parser.parseFromString(fileString);\n\n    _setBackgroundColor(manifest, dom);\n    _setBackgroundImageResizeMode(manifest, dom);\n\n    return serializer.serializeToString(dom);\n  });\n\n  await _setBackgroundImageAsync(manifest, projectRoot);\n\n  await spawnAsyncThrowError('ibtool', [\n    '--compile',\n    splashOutputFilename,\n    splashXibFilename,\n  ]);\n\n  console.log('DONE Configuring iOS Launch Screen');\n}\n\nexport {\n  configureLaunchAssetsAsync,\n};\n"],"sourceRoot":"/xdl/src"}