{"version":3,"sources":["detach/IosIcons.js"],"names":["async","manifest","destinationIconPath","projectRoot","process","platform","console","warn","let","defaultIconFilename","ios","iconUrl","await","saveUrlToPathAsync","icon","saveImageToPathAsync","iconSizes","forEach","iconSize","iconResolutions","iconResolution","iconQualifier","_getAppleIconQualifier","iconKey","rawIconFilename","usesDefault","hasOwnProperty","iconFilename","iconSizePx","spawnAsyncThrowError","stdio","cwd","_","dims","getImageDimensionsMacOSAsync","length","Error","path","join","createAndWriteIconsToPathAsync","dirname","basename","childProcess","dimensions","components","stdout","split","map","c","parseInt","filter","n","isNaN"],"mappings":"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","file":"../../detach/IosIcons.js","sourcesContent":["import path from 'path';\n\nimport {\n  saveImageToPathAsync,\n  saveUrlToPathAsync,\n  spawnAsyncThrowError,\n} from './ExponentTools';\n\nfunction _getAppleIconQualifier(iconSize, iconResolution) {\n  let iconQualifier;\n  if (iconResolution !== 1) {\n    // e.g. \"29x29@3x\"\n    iconQualifier = `${iconSize}x${iconSize}@${iconResolution}x`;\n  } else {\n    iconQualifier = `${iconSize}x${iconSize}`;\n  }\n  if (iconSize === 76 || iconSize === 83.5) {\n    // ipad sizes require ~ipad at the end\n    iconQualifier = `${iconQualifier}~ipad`;\n  }\n  return iconQualifier;\n}\n\n/**\n * Based on keys in the given manifest,\n * ensure that the proper iOS icon images exist -- assuming Info.plist already\n * points at them under CFBundleIcons.CFBundlePrimaryIcon.CFBundleIconFiles.\n *\n * This only works on MacOS (as far as I know) because it uses the sips utility.\n */\nasync function createAndWriteIconsToPathAsync(\n  manifest,\n  destinationIconPath,\n  projectRoot\n) {\n  if (process.platform !== 'darwin') {\n    console.warn('`sips` utility may or may not work outside of macOS');\n  }\n  let defaultIconFilename;\n  if (manifest.ios && manifest.ios.iconUrl) {\n    defaultIconFilename = 'exp-icon.png';\n    await saveUrlToPathAsync(\n      manifest.ios.iconUrl,\n      `${destinationIconPath}/${defaultIconFilename}`\n    );\n  } else if (manifest.iconUrl) {\n    defaultIconFilename = 'exp-icon.png';\n    await saveUrlToPathAsync(\n      manifest.iconUrl,\n      `${destinationIconPath}/${defaultIconFilename}`\n    );\n  } else if (projectRoot && manifest.icon) {\n    defaultIconFilename = 'exp-icon.png';\n    await saveImageToPathAsync(\n      projectRoot,\n      manifest.icon,\n      `${destinationIconPath}/${defaultIconFilename}`\n    );\n  }\n\n  let iconSizes = [20, 29, 40, 60, 76, 83.5, 1024];\n  iconSizes.forEach(iconSize => {\n    let iconResolutions;\n    if (iconSize === 76) {\n      // iPad has 1x and 2x icons for this size only\n      iconResolutions = [1, 2];\n    } else if (iconSize == 1024) {\n      // marketing icon is weird\n      iconResolutions = [1];\n    } else {\n      iconResolutions = [2, 3];\n    }\n    iconResolutions.forEach(async iconResolution => {\n      let iconQualifier = _getAppleIconQualifier(iconSize, iconResolution);\n      // TODO(nikki): Support local paths for these icons\n      let iconKey = `iconUrl${iconQualifier}`;\n      let rawIconFilename;\n      let usesDefault = false;\n      if (manifest.ios && manifest.ios.hasOwnProperty(iconKey)) {\n        // manifest specifies an image just for this size/resolution, use that\n        rawIconFilename = `exp-icon${iconQualifier}.png`;\n        await saveUrlToPathAsync(\n          manifest.ios[iconKey],\n          `${destinationIconPath}/${rawIconFilename}`\n        );\n      } else {\n        // use default manifest.iconUrl\n        usesDefault = true;\n        if (defaultIconFilename) {\n          rawIconFilename = defaultIconFilename;\n        } else {\n          console.warn(\n            `Manifest does not specify ios.${iconKey} nor a default iconUrl. Bundle will use the Expo logo.`\n          );\n          return;\n        }\n      }\n\n      let iconFilename = `AppIcon${iconQualifier}.png`;\n      let iconSizePx = iconSize * iconResolution;\n      // rewrite the color profile of the icon to the system profile\n      // otherwise sips will barf when resizing for some images per\n      // https://stackoverflow.com/questions/40316819/sips-shows-unable-to-render-destination-image\n      // this is supposedly related to 16-bit vs. 8-bit color profiles but w/e\n      try {\n        await spawnAsyncThrowError(\n          'sips',\n          [\n            '--matchTo',\n            '/System/Library/ColorSync/Profiles/sRGB Profile.icc',\n            '--out',\n            iconFilename,\n            rawIconFilename,\n          ],\n          {\n            stdio: ['ignore', 'ignore', 'ignore'],\n            cwd: destinationIconPath,\n          }\n        );\n      } catch (_) {\n        // if sips color profile matching failed, still write the original file to\n        // the destination path and try that, since the color thing isn't required\n        // for most images.\n        await spawnAsyncThrowError('/bin/cp', [rawIconFilename, iconFilename], {\n          stdio: 'inherit',\n          cwd: destinationIconPath,\n        });\n      }\n      await spawnAsyncThrowError('sips', ['-Z', iconSizePx, iconFilename], {\n        stdio: ['ignore', 'ignore', 'inherit'], // only stderr\n        cwd: destinationIconPath,\n      });\n\n      // reject non-square icons (because Apple will if we don't)\n      const dims = await getImageDimensionsMacOSAsync(\n        destinationIconPath,\n        iconFilename\n      );\n      if (!dims || dims.length < 2 || dims[0] !== dims[1]) {\n        throw new Error(\n          `iOS icons must be square, the dimensions of ${iconFilename} are ${dims}`\n        );\n      }\n\n      if (!usesDefault) {\n        // non-default icon used, clean up the downloaded version\n        await spawnAsyncThrowError('/bin/rm', [\n          path.join(destinationIconPath, rawIconFilename),\n        ]);\n      }\n    });\n  });\n\n  // clean up default icon\n  if (defaultIconFilename) {\n    await spawnAsyncThrowError('/bin/rm', [\n      path.join(destinationIconPath, defaultIconFilename),\n    ]);\n  }\n  return;\n}\n\n/**\n *  @return array [ width, height ] or nil if that fails for some reason.\n */\nasync function getImageDimensionsMacOSAsync(dirname, basename) {\n  if (process.platform !== 'darwin') {\n    console.warn('`sips` utility may or may not work outside of macOS');\n  }\n  let childProcess = await spawnAsyncThrowError(\n    'sips',\n    ['-g', 'pixelWidth', '-g', 'pixelHeight', basename],\n    {\n      cwd: dirname,\n    }\n  );\n  let dimensions;\n  try {\n    // stdout looks something like 'pixelWidth: 1200\\n pixelHeight: 800'\n    const components = childProcess.stdout.split(/(\\s+)/);\n    dimensions = components.map(c => parseInt(c, 10)).filter(n => !isNaN(n));\n  } catch (_) {}\n  return dimensions;\n}\n\nexport { createAndWriteIconsToPathAsync, getImageDimensionsMacOSAsync };\n"],"sourceRoot":"/xdl/src"}